{
  "name": "cosmic-portal-button",
  "type": "registry:component",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\"\n\nimport { cn } from \"@/lib/utils\"\nimport { motion, useAnimationControls, AnimatePresence } from \"motion/react\"\nimport { useState, useRef, useEffect } from \"react\"\nimport { Button } from \"@/components/ui/button\"\n\nexport default function CosmicPortalButton() {\n  const [isHovered, setIsHovered] = useState(false)\n  const [isEnteringPortal, setIsEnteringPortal] = useState(false)\n  const [portalActive, setPortalActive] = useState(false)\n  const buttonControls = useAnimationControls()\n  const buttonRef = useRef<HTMLButtonElement>(null)\n\n  // Generate stars\n  const starCount = 30\n  const stars = Array.from({ length: starCount }).map((_, i) => {\n    const size = Math.random() * 2 + 1\n    const angle = Math.random() * Math.PI * 2\n    const distance = Math.random() * 20 + 5\n    const delay = Math.random() * 3\n    const duration = Math.random() * 3 + 3\n\n    return {\n      id: i,\n      size,\n      angle,\n      distance,\n      delay,\n      duration,\n      x: Math.cos(angle) * distance,\n      y: Math.sin(angle) * distance,\n    }\n  })\n\n  // Generate orbital particles\n  const particleCount = 3\n  const particles = Array.from({ length: particleCount }).map((_, i) => {\n    const size = 4 + i * 1.5\n    const delay = i * 0.2\n    const duration = 3 + i * 0.5\n    const offset = (i * Math.PI * 2) / particleCount\n\n    return {\n      id: i,\n      size,\n      delay,\n      duration,\n      offset,\n    }\n  })\n\n  // Generate warp speed stars (contained within button)\n  const warpStarCount = 40\n  const warpStars = Array.from({ length: warpStarCount }).map((_, i) => {\n    const size = Math.random() * 2 + 1\n    const angle = Math.random() * Math.PI * 2\n    const startDistance = Math.random() * 5 + 2\n    const endDistance = Math.random() * 15 + 20\n    const delay = Math.random() * 0.5\n\n    return {\n      id: i,\n      size,\n      angle,\n      delay,\n      x: Math.cos(angle) * startDistance,\n      y: Math.sin(angle) * startDistance,\n      endX: Math.cos(angle) * endDistance,\n      endY: Math.sin(angle) * endDistance,\n    }\n  })\n\n  const handleClick = async () => {\n    if (portalActive) return\n\n    setPortalActive(true)\n\n    // Initial pulse animation\n    await buttonControls.start({\n      scale: [1, 0.97, 1.03, 1],\n      transition: { duration: 0.5 },\n    })\n\n    // Start portal entry animation\n    setIsEnteringPortal(true)\n\n    // Reset after portal animation completes\n    setTimeout(() => {\n      setIsEnteringPortal(false)\n      setPortalActive(false)\n    }, 4000) // Total animation time (slightly longer than visible effects)\n  }\n\n  // Reset animation if component unmounts during animation\n  useEffect(() => {\n    return () => {\n      setIsEnteringPortal(false)\n      setPortalActive(false)\n    }\n  }, [])\n\n  return (\n    <motion.div\n      className=\"relative\"\n      animate={buttonControls}\n      onHoverStart={() => !portalActive && setIsHovered(true)}\n      onHoverEnd={() => !portalActive && setIsHovered(false)}\n    >\n      <Button\n        ref={buttonRef}\n        className={cn(\n          \"relative min-w-48 h-14 overflow-hidden rounded-2xl border-0\",\n          \"bg-transparent\",\n          \"transition-all duration-500\",\n        )}\n        onClick={handleClick}\n        disabled={portalActive}\n      >\n        {/* Cosmic background with animated gradient */}\n        <motion.div\n          className={cn(\n            \"absolute inset-0 rounded-2xl\",\n            \"bg-gradient-to-br from-indigo-950 via-violet-900 to-fuchsia-950\",\n            \"dark:from-indigo-900 dark:via-violet-800 dark:to-fuchsia-900\",\n          )}\n          animate={\n            isEnteringPortal\n              ? {\n                  opacity: [1, 0.8, 0.6, 0.4, 0.2],\n                }\n              : {}\n          }\n          transition={\n            isEnteringPortal\n              ? {\n                  duration: 3,\n                  times: [0, 0.2, 0.4, 0.6, 1],\n                }\n              : {}\n          }\n        >\n          {/* Animated nebula effect */}\n          <motion.div\n            className={cn(\n              \"absolute inset-0\",\n              \"bg-[radial-gradient(ellipse_at_center,_rgba(156,39,176,0.3)_0%,_rgba(0,0,0,0)_70%)]\",\n              \"dark:bg-[radial-gradient(ellipse_at_center,_rgba(186,104,200,0.3)_0%,_rgba(0,0,0,0)_70%)]\",\n            )}\n            animate={{\n              scale: isHovered || isEnteringPortal ? [1, 1.2, 1.1] : 1,\n              opacity: isHovered || isEnteringPortal ? [0.5, 0.7, 0.6] : 0.5,\n            }}\n            transition={{\n              duration: 3,\n              repeat: isHovered || isEnteringPortal ? Number.POSITIVE_INFINITY : 0,\n              repeatType: \"reverse\",\n            }}\n          />\n        </motion.div>\n\n        {/* Portal effect - contained within button */}\n        <motion.div\n          className={cn(\n            \"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2\",\n            \"w-16 h-16 rounded-full\",\n            \"bg-transparent\",\n            \"flex items-center justify-center\",\n          )}\n          animate={\n            isEnteringPortal\n              ? {\n                  width: [\"4rem\", \"5rem\", \"6rem\", \"7rem\", \"8rem\"],\n                  height: [\"4rem\", \"5rem\", \"6rem\", \"7rem\", \"8rem\"],\n                }\n              : {}\n          }\n          transition={\n            isEnteringPortal\n              ? {\n                  duration: 3,\n                  times: [0, 0.2, 0.4, 0.6, 1],\n                }\n              : {}\n          }\n        >\n          {/* Outer glow ring */}\n          <motion.div\n            className={cn(\n              \"absolute w-full h-full rounded-full\",\n              \"bg-transparent\",\n              \"border-2 border-violet-300 dark:border-violet-400\",\n              \"shadow-[0_0_15px_5px_rgba(139,92,246,0.3)] dark:shadow-[0_0_15px_5px_rgba(167,139,250,0.3)]\",\n            )}\n            animate={\n              isEnteringPortal\n                ? {\n                    rotate: [0, 720],\n                    opacity: [0.9, 1, 0.8, 0.6, 0.4],\n                    borderWidth: [\"2px\", \"3px\", \"2px\", \"1px\", \"0px\"],\n                    boxShadow: [\n                      \"0 0 15px 5px rgba(139,92,246,0.3)\",\n                      \"0 0 20px 8px rgba(139,92,246,0.4)\",\n                      \"0 0 15px 5px rgba(139,92,246,0.3)\",\n                      \"0 0 10px 3px rgba(139,92,246,0.2)\",\n                      \"0 0 5px 2px rgba(139,92,246,0.1)\",\n                    ],\n                  }\n                : {\n                    rotate: 360,\n                    scale: isHovered ? [1, 1.05, 1] : 1,\n                    opacity: isHovered ? 0.9 : 0.7,\n                  }\n            }\n            transition={\n              isEnteringPortal\n                ? {\n                    duration: 3,\n                    times: [0, 0.2, 0.4, 0.7, 1],\n                  }\n                : {\n                    rotate: { duration: 10, repeat: Number.POSITIVE_INFINITY, ease: \"linear\" },\n                    scale: { duration: 2, repeat: isHovered ? Number.POSITIVE_INFINITY : 0, repeatType: \"reverse\" },\n                  }\n            }\n          />\n\n          {/* Inner portal */}\n          <motion.div\n            className={cn(\n              \"absolute w-3/4 h-3/4 rounded-full\",\n              \"bg-gradient-to-br from-violet-600/80 to-fuchsia-600/80\",\n              \"dark:from-violet-500/80 dark:to-fuchsia-500/80\",\n              \"shadow-[inset_0_0_15px_5px_rgba(139,92,246,0.3)] dark:shadow-[inset_0_0_15px_5px_rgba(167,139,250,0.3)]\",\n              \"flex items-center justify-center\",\n            )}\n            animate={\n              isEnteringPortal\n                ? {\n                    scale: [1, 1.1, 1.2, 1.1, 1],\n                    opacity: [0.8, 0.9, 1, 0.9, 0.8],\n                    background: [\n                      \"linear-gradient(to bottom right, rgba(124, 58, 237, 0.8), rgba(192, 38, 211, 0.8))\",\n                      \"linear-gradient(to bottom right, rgba(139, 92, 246, 0.9), rgba(217, 70, 239, 0.9))\",\n                      \"linear-gradient(to bottom right, rgba(167, 139, 250, 1), rgba(232, 121, 249, 1))\",\n                      \"linear-gradient(to bottom right, rgba(139, 92, 246, 0.9), rgba(217, 70, 239, 0.9))\",\n                      \"linear-gradient(to bottom right, rgba(124, 58, 237, 0.8), rgba(192, 38, 211, 0.8))\",\n                    ],\n                    boxShadow: [\n                      \"inset 0 0 15px 5px rgba(139,92,246,0.3)\",\n                      \"inset 0 0 20px 8px rgba(139,92,246,0.4)\",\n                      \"inset 0 0 25px 10px rgba(139,92,246,0.5)\",\n                      \"inset 0 0 20px 8px rgba(139,92,246,0.4)\",\n                      \"inset 0 0 15px 5px rgba(139,92,246,0.3)\",\n                    ],\n                  }\n                : {\n                    scale: isHovered ? [1, 1.1, 1.05] : 1,\n                    filter: isHovered ? \"brightness(1.2)\" : \"brightness(1)\",\n                  }\n            }\n            transition={\n              isEnteringPortal\n                ? {\n                    duration: 3,\n                    times: [0, 0.25, 0.5, 0.75, 1],\n                  }\n                : {\n                    duration: 2,\n                    repeat: isHovered ? Number.POSITIVE_INFINITY : 0,\n                    repeatType: \"reverse\",\n                  }\n            }\n          >\n            {/* Portal core */}\n            <motion.div\n              className={cn(\n                \"w-1/2 h-1/2 rounded-full\",\n                \"bg-white dark:bg-violet-200\",\n                \"shadow-[0_0_20px_10px_rgba(255,255,255,0.5)] dark:shadow-[0_0_20px_10px_rgba(237,233,254,0.5)]\",\n              )}\n              animate={\n                isEnteringPortal\n                  ? {\n                      scale: [1, 1.3, 1.5, 1.3, 1],\n                      opacity: [0.7, 0.8, 1, 0.8, 0.7],\n                      boxShadow: [\n                        \"0 0 20px 10px rgba(255,255,255,0.5)\",\n                        \"0 0 25px 12px rgba(255,255,255,0.6)\",\n                        \"0 0 30px 15px rgba(255,255,255,0.7)\",\n                        \"0 0 25px 12px rgba(255,255,255,0.6)\",\n                        \"0 0 20px 10px rgba(255,255,255,0.5)\",\n                      ],\n                    }\n                  : {\n                      scale: isHovered ? [1, 1.2, 1] : 1,\n                      opacity: isHovered ? 0.9 : 0.7,\n                    }\n              }\n              transition={\n                isEnteringPortal\n                  ? {\n                      duration: 3,\n                      times: [0, 0.25, 0.5, 0.75, 1],\n                    }\n                  : {\n                      duration: 2,\n                      repeat: isHovered ? Number.POSITIVE_INFINITY : 0,\n                      repeatType: \"reverse\",\n                    }\n              }\n            />\n          </motion.div>\n\n          {/* Orbital particles */}\n          {particles.map((particle) => (\n            <motion.div\n              key={`particle-${particle.id}`}\n              className={cn(\n                \"absolute rounded-full\",\n                \"bg-violet-300 dark:bg-violet-200\",\n                \"shadow-[0_0_10px_2px_rgba(139,92,246,0.5)] dark:shadow-[0_0_10px_2px_rgba(167,139,250,0.5)]\",\n              )}\n              animate={\n                isEnteringPortal\n                  ? {\n                      rotate: [0, 360, 720, 1080],\n                      scale: [1, 1.2, 1, 0.8, 1],\n                      opacity: [1, 0.8, 1, 0.8, 1],\n                      boxShadow: [\n                        \"0 0 10px 2px rgba(139,92,246,0.5)\",\n                        \"0 0 15px 3px rgba(139,92,246,0.6)\",\n                        \"0 0 10px 2px rgba(139,92,246,0.5)\",\n                        \"0 0 5px 1px rgba(139,92,246,0.4)\",\n                        \"0 0 10px 2px rgba(139,92,246,0.5)\",\n                      ],\n                    }\n                  : {\n                      rotate: 360,\n                      scale: isHovered ? [1, 1.2, 1] : 1,\n                    }\n              }\n              transition={\n                isEnteringPortal\n                  ? {\n                      duration: 3,\n                      times: [0, 0.25, 0.5, 0.75, 1],\n                    }\n                  : {\n                      rotate: {\n                        duration: particle.duration,\n                        repeat: Number.POSITIVE_INFINITY,\n                        ease: \"linear\",\n                        delay: particle.delay,\n                      },\n                      scale: {\n                        duration: 2,\n                        repeat: isHovered ? Number.POSITIVE_INFINITY : 0,\n                        repeatType: \"reverse\",\n                      },\n                    }\n              }\n              style={{\n                width: particle.size,\n                height: particle.size,\n                transformOrigin: \"center\",\n                offsetPath: `path(\"M 0,0 m -25,0 a 25,25 0 1,0 50,0 a 25,25 0 1,0 -50,0\")`,\n                offsetDistance: `${(particle.offset * 100) % 100}%`,\n              }}\n            />\n          ))}\n        </motion.div>\n\n        {/* Stars */}\n        {stars.map((star) => (\n          <motion.div\n            key={`star-${star.id}`}\n            className={cn(\n              \"absolute left-1/2 top-1/2 rounded-full\",\n              \"bg-white dark:bg-violet-100\",\n              \"shadow-[0_0_5px_2px_rgba(255,255,255,0.3)] dark:shadow-[0_0_5px_2px_rgba(237,233,254,0.3)]\",\n            )}\n            style={{ width: star.size, height: star.size }}\n            initial={{\n              x: 0,\n              y: 0,\n              opacity: 0,\n              scale: 0,\n            }}\n            animate={\n              isHovered || isEnteringPortal\n                ? {\n                    x: star.x,\n                    y: star.y,\n                    opacity: [0, 0.8, 0],\n                    scale: [0, 1, 0],\n                  }\n                : {\n                    x: 0,\n                    y: 0,\n                    opacity: 0,\n                    scale: 0,\n                  }\n            }\n            transition={\n              isHovered || isEnteringPortal\n                ? {\n                    duration: star.duration,\n                    delay: star.delay,\n                    repeat: Number.POSITIVE_INFINITY,\n                    repeatType: \"loop\",\n                  }\n                : {\n                    duration: 0.3,\n                  }\n            }\n          />\n        ))}\n\n        {/* Warp speed effect (only visible during portal entry) */}\n        <AnimatePresence>\n          {isEnteringPortal && (\n            <>\n              {warpStars.map((star) => (\n                <motion.div\n                  key={`warp-${star.id}`}\n                  className={cn(\n                    \"absolute left-1/2 top-1/2 rounded-full\",\n                    \"bg-white dark:bg-violet-100\",\n                    \"shadow-[0_0_3px_1px_rgba(255,255,255,0.5)] dark:shadow-[0_0_3px_1px_rgba(237,233,254,0.5)]\",\n                  )}\n                  initial={{\n                    x: star.x,\n                    y: star.y,\n                    opacity: 0,\n                    scale: 0,\n                  }}\n                  animate={{\n                    x: star.endX,\n                    y: star.endY,\n                    opacity: [0, 0.9, 0],\n                    scale: [0, 1, 0],\n                  }}\n                  exit={{\n                    opacity: 0,\n                    scale: 0,\n                  }}\n                  transition={{\n                    duration: 1.5,\n                    delay: star.delay,\n                    repeat: 2,\n                    repeatType: \"loop\",\n                    times: [0, 0.1, 1],\n                    ease: \"easeOut\",\n                  }}\n                  style={{ width: star.size, height: star.size }}\n                />\n              ))}\n            </>\n          )}\n        </AnimatePresence>\n\n        {/* Cosmic energy waves (only during portal entry) */}\n        <AnimatePresence>\n          {isEnteringPortal && (\n            <>\n              {[1, 2, 3].map((wave) => (\n                <motion.div\n                  key={`wave-${wave}`}\n                  className={cn(\n                    \"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 rounded-full\",\n                    \"border border-violet-300/30 dark:border-violet-200/30\",\n                  )}\n                  initial={{\n                    width: 0,\n                    height: 0,\n                    opacity: 0,\n                  }}\n                  animate={{\n                    width: [\"0%\", \"150%\", \"0%\"],\n                    height: [\"0%\", \"150%\", \"0%\"],\n                    opacity: [0, 0.5, 0],\n                  }}\n                  exit={{\n                    opacity: 0,\n                    width: 0,\n                    height: 0,\n                  }}\n                  transition={{\n                    duration: 2,\n                    delay: wave * 0.5,\n                    repeat: 1,\n                    repeatType: \"loop\",\n                    times: [0, 0.5, 1],\n                    ease: \"easeInOut\",\n                  }}\n                />\n              ))}\n            </>\n          )}\n        </AnimatePresence>\n\n        {/* Text with glow effect */}\n        <motion.span\n          className={cn(\n            \"relative z-10 font-semibold text-white dark:text-white\",\n            \"text-shadow-[0_0_10px_rgba(255,255,255,0.5)] dark:text-shadow-[0_0_10px_rgba(255,255,255,0.5)]\",\n            \"tracking-wider\",\n          )}\n          animate={\n            isEnteringPortal\n              ? {\n                  opacity: [1, 0.8, 0.6, 0.4, 0.2],\n                  textShadow: [\n                    \"0 0 10px rgba(255,255,255,0.5)\",\n                    \"0 0 15px rgba(255,255,255,0.7), 0 0 30px rgba(139,92,246,0.7)\",\n                    \"0 0 20px rgba(255,255,255,0.9), 0 0 40px rgba(139,92,246,0.9)\",\n                    \"0 0 15px rgba(255,255,255,0.7), 0 0 30px rgba(139,92,246,0.7)\",\n                    \"0 0 10px rgba(255,255,255,0.5)\",\n                  ],\n                }\n              : {\n                  textShadow: isHovered\n                    ? \"0 0 10px rgba(255,255,255,0.8), 0 0 20px rgba(139,92,246,0.6)\"\n                    : \"0 0 10px rgba(255,255,255,0.5)\",\n                }\n          }\n          transition={\n            isEnteringPortal\n              ? {\n                  duration: 3,\n                  times: [0, 0.25, 0.5, 0.75, 1],\n                }\n              : {}\n          }\n        >\n          EXPLORE COSMOS\n        </motion.span>\n      </Button>\n\n      {/* Bottom reflection/glow */}\n      <motion.div\n        className={cn(\n          \"absolute -bottom-4 left-1/2 -translate-x-1/2\",\n          \"w-3/4 h-3 rounded-full blur-md\",\n          \"bg-violet-500/30 dark:bg-violet-400/30\",\n        )}\n        animate={\n          isEnteringPortal\n            ? {\n                width: [\"75%\", \"85%\", \"90%\", \"85%\", \"75%\"],\n                opacity: [0.3, 0.4, 0.5, 0.4, 0.3],\n                height: [3, 4, 5, 4, 3],\n              }\n            : {\n                width: isHovered ? \"80%\" : \"75%\",\n                opacity: isHovered ? 0.5 : 0.3,\n              }\n        }\n        transition={\n          isEnteringPortal\n            ? {\n                duration: 3,\n                times: [0, 0.25, 0.5, 0.75, 1],\n              }\n            : { duration: 1 }\n        }\n      />\n    </motion.div>\n  )\n}\n",
      "path": "/components/framixui/cosmic-portal-button.tsx",
      "target": "/components/framixui/cosmic-portal-button.tsx"
    }
  ]
}