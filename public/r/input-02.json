{
  "name": "input-02",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "registryDependencies": [
    "button",
    "input"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\"\n\nimport { useState, useRef, useEffect } from \"react\"\nimport { motion, AnimatePresence } from \"motion/react\"\nimport { Mic, MicOff, Send, Trash2 } from \"lucide-react\"\nimport { Input } from \"@/components/ui/input\"\nimport { Button } from \"@/components/ui/button\"\nimport { cn } from \"@/lib/utils\"\n\nexport default function Input02() {\n  const [text, setText] = useState(\"\")\n  const [isRecording, setIsRecording] = useState(false)\n  const [audioVisualization, setAudioVisualization] = useState<number[]>([])\n  const inputRef = useRef<HTMLInputElement>(null)\n  const animationFrameRef = useRef<number | null>(null)\n\n  // Simulate audio visualization\n  useEffect(() => {\n    if (isRecording) {\n      const generateRandomBars = () => {\n        const bars = Array.from({ length: 12 }, () => Math.random() * 100)\n        setAudioVisualization(bars)\n        animationFrameRef.current = requestAnimationFrame(generateRandomBars)\n      }\n\n      generateRandomBars()\n\n      // Simulate speech recognition after 3 seconds\n      const timer = setTimeout(() => {\n        const phrases = [\n          \"Schedule a meeting for tomorrow at 2 PM\",\n          \"Remind me to call John later\",\n          \"Add milk to my shopping list\",\n          \"What's the weather forecast for today\",\n          \"Send an email to the team about the project update\",\n        ]\n        const randomPhrase = phrases[Math.floor(Math.random() * phrases.length)]\n        setText(randomPhrase)\n        stopRecording()\n      }, 3000)\n\n      return () => {\n        if (animationFrameRef.current) {\n          cancelAnimationFrame(animationFrameRef.current)\n        }\n        clearTimeout(timer)\n      }\n    }\n  }, [isRecording])\n\n  const startRecording = () => {\n    setText(\"\")\n    setIsRecording(true)\n  }\n\n  const stopRecording = () => {\n    setIsRecording(false)\n    if (animationFrameRef.current) {\n      cancelAnimationFrame(animationFrameRef.current)\n    }\n    setAudioVisualization([])\n  }\n\n  const clearText = () => {\n    setText(\"\")\n    inputRef.current?.focus()\n  }\n\n  return (\n    <div className=\"w-full max-w-md mx-auto\">\n      <div className=\"relative\">\n        <motion.div\n          className={cn(\n            \"relative rounded-lg\",\n            \"border border-input\",\n            \"bg-background\",\n            \"shadow-sm\",\n            isRecording && \"ring-2 ring-red-500 ring-offset-2 ring-offset-background\",\n          )}\n          animate={{\n            scale: isRecording ? 1.02 : 1,\n          }}\n          transition={{ duration: 0.2 }}\n        >\n          <div className=\"flex items-center px-3\">\n            <Input\n              ref={inputRef}\n              type=\"text\"\n              value={text}\n              onChange={(e) => setText(e.target.value)}\n              placeholder=\"Speak or type your message...\"\n              className=\"border-0 bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0 p-0 h-10 text-sm\"\n              disabled={isRecording}\n            />\n            <div className=\"flex items-center gap-1\">\n              {text && !isRecording && (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  exit={{ opacity: 0, scale: 0.8 }}\n                  transition={{ duration: 0.15 }}\n                >\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"h-8 w-8 text-muted-foreground hover:text-foreground\"\n                    onClick={clearText}\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                    <span className=\"sr-only\">Clear text</span>\n                  </Button>\n                </motion.div>\n              )}\n              <Button\n                type=\"button\"\n                variant={isRecording ? \"destructive\" : \"secondary\"}\n                size=\"icon\"\n                className={cn(\"h-8 w-8\", isRecording && \"animate-pulse\")}\n                onClick={isRecording ? stopRecording : startRecording}\n              >\n                {isRecording ? <MicOff className=\"h-4 w-4\" /> : <Mic className=\"h-4 w-4\" />}\n                <span className=\"sr-only\">{isRecording ? \"Stop recording\" : \"Start recording\"}</span>\n              </Button>\n              {text && !isRecording && (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  transition={{ duration: 0.15 }}\n                >\n                  <Button type=\"button\" size=\"icon\" className=\"h-8 w-8 ml-1\">\n                    <Send className=\"h-4 w-4\" />\n                    <span className=\"sr-only\">Send message</span>\n                  </Button>\n                </motion.div>\n              )}\n            </div>\n          </div>\n        </motion.div>\n\n        {/* Audio visualization */}\n        <AnimatePresence>\n          {isRecording && (\n            <motion.div\n              className=\"absolute left-0 right-0 -bottom-12 flex items-end justify-center h-8 gap-0.5\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n            >\n              {audioVisualization.map((height, index) => (\n                <motion.div\n                  key={index}\n                  className=\"w-1 bg-red-500 rounded-full\"\n                  initial={{ height: 2 }}\n                  animate={{ height: Math.max(4, Math.min(32, height / 3)) }}\n                  transition={{\n                    type: \"spring\",\n                    stiffness: 300,\n                    damping: 10,\n                  }}\n                />\n              ))}\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n    </div>\n  )\n}\n",
      "path": "/components/framixui/input/input-02.tsx",
      "target": "/components/codesnippetui/input-02.tsx"
    }
  ]
}