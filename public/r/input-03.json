{
  "name": "input-03",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "registryDependencies": [
    "button",
    "progress"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\"\n\nimport type React from \"react\"\n\nimport { useState, useRef } from \"react\"\nimport { motion, AnimatePresence } from \"motion/react\"\nimport {\n  Upload,\n  File,\n  FileImage,\n  FileText,\n  FileCode,\n  FileArchive,\n  FileAudio,\n  FileVideo,\n  CheckCircle2,\n  AlertCircle,\n  Trash2,\n} from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { cn } from \"@/lib/utils\"\n\nexport default function Input03() {\n  const [isDragging, setIsDragging] = useState(false)\n  const [files, setFiles] = useState<\n    Array<{\n      id: string\n      name: string\n      size: number\n      type: string\n      progress: number\n      status: \"uploading\" | \"success\" | \"error\"\n      preview?: string\n    }>\n  >([])\n  const fileInputRef = useRef<HTMLInputElement>(null)\n\n  const handleDragEnter = (e: React.DragEvent) => {\n    e.preventDefault()\n    e.stopPropagation()\n    setIsDragging(true)\n  }\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault()\n    e.stopPropagation()\n    setIsDragging(false)\n  }\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault()\n    e.stopPropagation()\n    if (!isDragging) {\n      setIsDragging(true)\n    }\n  }\n\n  const processFiles = (fileList: FileList) => {\n    const newFiles = Array.from(fileList).map((file) => {\n      const id = Math.random().toString(36).substring(2, 11)\n\n      // Create preview for images\n      let preview = undefined\n      if (file.type.startsWith(\"image/\")) {\n        preview = URL.createObjectURL(file)\n      }\n\n      return {\n        id,\n        name: file.name,\n        size: file.size,\n        type: file.type,\n        progress: 0,\n        status: \"uploading\" as const,\n        preview,\n      }\n    })\n\n    setFiles((prev) => [...prev, ...newFiles])\n\n    // Simulate upload progress for each file\n    newFiles.forEach((file) => {\n      simulateUpload(file.id)\n    })\n  }\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault()\n    e.stopPropagation()\n    setIsDragging(false)\n\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      processFiles(e.dataTransfer.files)\n    }\n  }\n\n  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length > 0) {\n      processFiles(e.target.files)\n      // Reset file input\n      if (fileInputRef.current) {\n        fileInputRef.current.value = \"\"\n      }\n    }\n  }\n\n  const simulateUpload = (fileId: string) => {\n    let progress = 0\n    const interval = setInterval(() => {\n      progress += Math.floor(Math.random() * 10) + 5\n      if (progress >= 100) {\n        progress = 100\n        clearInterval(interval)\n\n        // Simulate success or error (90% success rate)\n        const success = Math.random() > 0.1\n\n        setFiles((prev) =>\n          prev.map((file) =>\n            file.id === fileId ? { ...file, progress, status: success ? \"success\" : \"error\" } : file,\n          ),\n        )\n      } else {\n        setFiles((prev) => prev.map((file) => (file.id === fileId ? { ...file, progress } : file)))\n      }\n    }, 300)\n  }\n\n  const removeFile = (fileId: string) => {\n    setFiles((prev) => {\n      const updatedFiles = prev.filter((file) => file.id !== fileId)\n      // Clean up any object URLs to prevent memory leaks\n      const fileToRemove = prev.find((file) => file.id === fileId)\n      if (fileToRemove?.preview) {\n        URL.revokeObjectURL(fileToRemove.preview)\n      }\n      return updatedFiles\n    })\n  }\n\n  const getFileIcon = (fileType: string) => {\n    if (fileType.startsWith(\"image/\")) return <FileImage className=\"h-5 w-5\" />\n    if (fileType.startsWith(\"text/\")) return <FileText className=\"h-5 w-5\" />\n    if (fileType.startsWith(\"audio/\")) return <FileAudio className=\"h-5 w-5\" />\n    if (fileType.startsWith(\"video/\")) return <FileVideo className=\"h-5 w-5\" />\n    if (fileType.includes(\"zip\") || fileType.includes(\"compressed\") || fileType.includes(\"archive\"))\n      return <FileArchive className=\"h-5 w-5\" />\n    if (\n      fileType.includes(\"javascript\") ||\n      fileType.includes(\"json\") ||\n      fileType.includes(\"html\") ||\n      fileType.includes(\"css\")\n    )\n      return <FileCode className=\"h-5 w-5\" />\n    return <File className=\"h-5 w-5\" />\n  }\n\n  const formatFileSize = (bytes: number): string => {\n    if (bytes === 0) return \"0 Bytes\"\n    const k = 1024\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"]\n    const i = Math.floor(Math.log(bytes) / Math.log(k))\n    return Number.parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + \" \" + sizes[i]\n  }\n\n  return (\n    <div className=\"w-full max-w-md mx-auto\">\n      <div\n        className={cn(\n          \"relative rounded-lg border-2 border-dashed transition-all duration-300\",\n          \"bg-background hover:bg-muted/30\",\n          isDragging\n            ? \"border-primary bg-muted/40 ring-2 ring-primary ring-offset-2 ring-offset-background\"\n            : \"border-muted-foreground/25\",\n          files.length > 0 ? \"p-4\" : \"p-8\",\n        )}\n        onDragEnter={handleDragEnter}\n        onDragLeave={handleDragLeave}\n        onDragOver={handleDragOver}\n        onDrop={handleDrop}\n      >\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          multiple\n          className=\"hidden\"\n          onChange={handleFileInputChange}\n          accept=\"image/*,application/pdf,text/*,audio/*,video/*,application/zip,application/x-zip-compressed\"\n          tabIndex={-1}\n        />\n\n        {/* Upload area */}\n        <AnimatePresence mode=\"wait\">\n          {files.length === 0 ? (\n            <motion.div\n              key=\"upload-area\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              className=\"flex flex-col items-center justify-center text-center\"\n            >\n              <motion.div\n                className={cn(\n                  \"p-3 rounded-full\",\n                  \"bg-primary/10 dark:bg-primary/20\",\n                  \"text-primary dark:text-primary/90\",\n                  \"mb-4\",\n                )}\n                animate={{\n                  y: isDragging ? [0, -10, 0] : 0,\n                  scale: isDragging ? [1, 1.1, 1] : 1,\n                }}\n                transition={{ duration: 0.5 }}\n              >\n                <Upload className=\"h-6 w-6\" />\n              </motion.div>\n              <h3 className=\"text-lg font-medium mb-1\">{isDragging ? \"Drop files here\" : \"Upload files\"}</h3>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Drag & drop files or{\" \"}\n                <button\n                  type=\"button\"\n                  className=\"text-primary hover:underline focus:outline-none\"\n                  onClick={(e) => {\n                    e.preventDefault()\n                    e.stopPropagation()\n                    if (fileInputRef.current) {\n                      fileInputRef.current.click()\n                    }\n                  }}\n                >\n                  browse\n                </button>\n              </p>\n              <p className=\"text-xs text-muted-foreground\">Supports images, documents, audio, video, and archives</p>\n            </motion.div>\n          ) : (\n            <motion.div\n              key=\"file-list\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              className=\"w-full\"\n            >\n              <div className=\"flex justify-between items-center mb-4\">\n                <h3 className=\"text-sm font-medium\">\n                  {files.length} file{files.length !== 1 && \"s\"}\n                </h3>\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"h-8 text-xs\"\n                  onClick={(e) => {\n                    e.preventDefault()\n                    e.stopPropagation()\n                    if (fileInputRef.current) {\n                      fileInputRef.current.click()\n                    }\n                  }}\n                >\n                  Add more\n                </Button>\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        {/* File list */}\n        <AnimatePresence>\n          {files.map((file) => (\n            <motion.div\n              key={file.id}\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -10, transition: { duration: 0.2 } }}\n              transition={{ duration: 0.3 }}\n              className={cn(\n                \"mb-3 last:mb-0 rounded-lg overflow-hidden\",\n                \"border bg-background\",\n                \"transition-all duration-200\",\n                file.status === \"success\" && \"border-green-500/30 bg-green-500/5\",\n                file.status === \"error\" && \"border-red-500/30 bg-red-500/5\",\n              )}\n            >\n              <div className=\"p-3\">\n                <div className=\"flex items-start gap-3\">\n                  {/* File preview or icon */}\n                  <div className=\"flex-shrink-0\">\n                    {file.preview ? (\n                      <div className=\"w-10 h-10 rounded-md overflow-hidden bg-muted\">\n                        <img\n                          src={file.preview || \"/placeholder.svg\"}\n                          alt={file.name}\n                          className=\"w-full h-full object-cover\"\n                        />\n                      </div>\n                    ) : (\n                      <div className=\"w-10 h-10 rounded-md bg-muted flex items-center justify-center\">\n                        {getFileIcon(file.type)}\n                      </div>\n                    )}\n                  </div>\n\n                  {/* File info */}\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex justify-between items-start\">\n                      <div className=\"truncate pr-2\">\n                        <p className=\"text-sm font-medium truncate\">{file.name}</p>\n                        <p className=\"text-xs text-muted-foreground\">{formatFileSize(file.size)}</p>\n                      </div>\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"icon\"\n                        className=\"h-6 w-6 flex-shrink-0 -mt-1 -mr-1\"\n                        onClick={() => removeFile(file.id)}\n                      >\n                        <Trash2 className=\"h-3.5 w-3.5\" />\n                        <span className=\"sr-only\">Remove file</span>\n                      </Button>\n                    </div>\n\n                    {/* Progress bar */}\n                    <div className=\"mt-2\">\n                      {file.status === \"uploading\" ? (\n                        <div className=\"space-y-1\">\n                          <Progress value={file.progress} className=\"h-1\" />\n                          <p className=\"text-xs text-muted-foreground\">Uploading... {file.progress}%</p>\n                        </div>\n                      ) : file.status === \"success\" ? (\n                        <div className=\"flex items-center text-xs text-green-600 dark:text-green-400\">\n                          <CheckCircle2 className=\"h-3.5 w-3.5 mr-1\" />\n                          Upload complete\n                        </div>\n                      ) : (\n                        <div className=\"flex items-center text-xs text-red-600 dark:text-red-400\">\n                          <AlertCircle className=\"h-3.5 w-3.5 mr-1\" />\n                          Upload failed\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </motion.div>\n          ))}\n        </AnimatePresence>\n\n        {/* Drag overlay */}\n        <AnimatePresence>\n          {isDragging && (\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              className=\"absolute inset-0 bg-primary/10 dark:bg-primary/20 rounded-lg z-10 flex items-center justify-center\"\n            >\n              <motion.div\n                className=\"flex flex-col items-center\"\n                animate={{ y: [0, -10, 0] }}\n                transition={{ duration: 1, repeat: Number.POSITIVE_INFINITY }}\n              >\n                <Upload className=\"h-10 w-10 text-primary mb-2\" />\n                <p className=\"text-lg font-medium text-primary\">Drop files to upload</p>\n              </motion.div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n    </div>\n  )\n}\n",
      "path": "/components/framixui/input/input-03.tsx",
      "target": "/components/codesnippetui/input-03.tsx"
    }
  ]
}