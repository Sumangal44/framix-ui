{
  "name": "input-05",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "registryDependencies": [
    "button",
    "input"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\"\n\nimport { useState, useRef, useEffect } from \"react\"\nimport { motion, AnimatePresence } from \"motion/react\"\nimport { MapPin, X, Navigation, Clock, Search, Loader2 } from \"lucide-react\"\nimport { Input } from \"@/components/ui/input\"\nimport { Button } from \"@/components/ui/button\"\nimport { cn } from \"@/lib/utils\"\n\nexport default function Input05() {\n  const [query, setQuery] = useState(\"\")\n  const [isFocused, setIsFocused] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n  const [selectedLocation, setSelectedLocation] = useState<string | null>(null)\n  const inputRef = useRef<HTMLInputElement>(null)\n  const containerRef = useRef<HTMLDivElement>(null)\n\n  // Mock location suggestions\n  const mockLocations = [\n    { id: 1, name: \"New York City, NY, USA\", type: \"city\" },\n    { id: 2, name: \"Los Angeles, CA, USA\", type: \"city\" },\n    { id: 3, name: \"San Francisco, CA, USA\", type: \"city\" },\n    { id: 4, name: \"Central Park, New York, NY, USA\", type: \"place\" },\n    { id: 5, name: \"Times Square, New York, NY, USA\", type: \"place\" },\n    { id: 6, name: \"Golden Gate Park, San Francisco, CA, USA\", type: \"place\" },\n  ]\n\n  // Recent locations\n  const recentLocations = [\n    { id: 101, name: \"Home\", address: \"123 Main St, Anytown, USA\", type: \"recent\" },\n    { id: 102, name: \"Work\", address: \"456 Office Blvd, Worktown, USA\", type: \"recent\" },\n    { id: 103, name: \"Gym\", address: \"789 Fitness Ave, Healthville, USA\", type: \"recent\" },\n  ]\n\n  // Filter locations based on query\n  const filteredLocations = query\n    ? mockLocations.filter((location) => location.name.toLowerCase().includes(query.toLowerCase()))\n    : []\n\n  // Simulate loading state when typing\n  useEffect(() => {\n    if (query) {\n      setIsLoading(true)\n      const timer = setTimeout(() => {\n        setIsLoading(false)\n      }, 800)\n      return () => clearTimeout(timer)\n    }\n  }, [query])\n\n  // Handle click outside to close suggestions\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (containerRef.current && !containerRef.current.contains(event.target as Node)) {\n        setIsFocused(false)\n      }\n    }\n\n    document.addEventListener(\"mousedown\", handleClickOutside)\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside)\n  }, [])\n\n  const handleClear = () => {\n    setQuery(\"\")\n    setSelectedLocation(null)\n    inputRef.current?.focus()\n  }\n\n  const handleSelectLocation = (locationName: string) => {\n    setSelectedLocation(locationName)\n    setQuery(locationName)\n    setIsFocused(false)\n  }\n\n  const handleUseCurrentLocation = () => {\n    setIsLoading(true)\n    // Simulate geolocation\n    setTimeout(() => {\n      setSelectedLocation(\"Current Location\")\n      setQuery(\"Current Location\")\n      setIsLoading(false)\n      setIsFocused(false)\n    }, 1500)\n  }\n\n  return (\n    <div className=\"w-full max-w-md mx-auto\" ref={containerRef}>\n      <div className=\"relative\">\n        <motion.div\n          className={cn(\n            \"relative rounded-lg\",\n            \"border border-input\",\n            \"bg-background\",\n            \"shadow-sm\",\n            isFocused && \"ring-2 ring-ring ring-offset-2 ring-offset-background\",\n          )}\n          animate={{\n            scale: isFocused ? 1.02 : 1,\n          }}\n          transition={{ duration: 0.2 }}\n        >\n          <div className=\"flex items-center px-3\">\n            <MapPin className=\"h-4 w-4 mr-2 text-blue-500\" />\n            <Input\n              ref={inputRef}\n              type=\"text\"\n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n              onFocus={() => setIsFocused(true)}\n              placeholder=\"Enter location...\"\n              className=\"border-0 bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0 p-0 h-10 text-sm\"\n            />\n            <AnimatePresence>\n              {isLoading ? (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  exit={{ opacity: 0, scale: 0.8 }}\n                  transition={{ duration: 0.15 }}\n                >\n                  <Loader2 className=\"h-4 w-4 animate-spin text-muted-foreground\" />\n                </motion.div>\n              ) : (\n                query && (\n                  <motion.div\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    exit={{ opacity: 0, scale: 0.8 }}\n                    transition={{ duration: 0.15 }}\n                  >\n                    <Button type=\"button\" variant=\"ghost\" size=\"icon\" className=\"h-6 w-6\" onClick={handleClear}>\n                      <X className=\"h-3.5 w-3.5\" />\n                      <span className=\"sr-only\">Clear location</span>\n                    </Button>\n                  </motion.div>\n                )\n              )}\n            </AnimatePresence>\n          </div>\n        </motion.div>\n\n        <AnimatePresence>\n          {isFocused && (\n            <motion.div\n              className=\"absolute left-0 right-0 mt-2 py-2 bg-background border rounded-lg shadow-md z-10\"\n              initial={{ opacity: 0, y: -10 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -10 }}\n              transition={{ duration: 0.2 }}\n            >\n              {/* Current location option */}\n              <motion.div\n                className=\"px-3 py-2 hover:bg-muted flex items-center cursor-pointer\"\n                initial={{ opacity: 0, y: -5 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.2 }}\n                onClick={handleUseCurrentLocation}\n              >\n                <div className=\"mr-3 p-1.5 bg-blue-100 dark:bg-blue-900 rounded-full text-blue-600 dark:text-blue-300\">\n                  <Navigation className=\"h-3.5 w-3.5\" />\n                </div>\n                <span className=\"text-sm font-medium\">Use current location</span>\n              </motion.div>\n\n              {/* Divider */}\n              {(recentLocations.length > 0 || filteredLocations.length > 0) && <div className=\"h-px bg-muted my-2\" />}\n\n              {/* Recent locations */}\n              {!query && recentLocations.length > 0 && (\n                <>\n                  <div className=\"px-3 py-1 text-xs text-muted-foreground\">Recent locations</div>\n                  {recentLocations.map((location, index) => (\n                    <motion.div\n                      key={location.id}\n                      className=\"px-3 py-2 hover:bg-muted flex items-center cursor-pointer\"\n                      initial={{ opacity: 0, y: -5 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ duration: 0.2, delay: index * 0.05 }}\n                      onClick={() => handleSelectLocation(location.name)}\n                    >\n                      <div className=\"mr-3 p-1.5 bg-muted rounded-full text-muted-foreground\">\n                        <Clock className=\"h-3.5 w-3.5\" />\n                      </div>\n                      <div>\n                        <div className=\"text-sm font-medium\">{location.name}</div>\n                        <div className=\"text-xs text-muted-foreground\">{location.address}</div>\n                      </div>\n                    </motion.div>\n                  ))}\n                </>\n              )}\n\n              {/* Search results */}\n              {query && (\n                <div className=\"max-h-60 overflow-y-auto\">\n                  {isLoading ? (\n                    <div className=\"px-3 py-8 flex flex-col items-center justify-center\">\n                      <Loader2 className=\"h-6 w-6 animate-spin text-muted-foreground mb-2\" />\n                      <p className=\"text-sm text-muted-foreground\">Searching locations...</p>\n                    </div>\n                  ) : filteredLocations.length > 0 ? (\n                    filteredLocations.map((location, index) => (\n                      <motion.div\n                        key={location.id}\n                        className=\"px-3 py-2 hover:bg-muted flex items-center cursor-pointer\"\n                        initial={{ opacity: 0, y: -5 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        transition={{ duration: 0.2, delay: index * 0.05 }}\n                        onClick={() => handleSelectLocation(location.name)}\n                      >\n                        <div className=\"mr-3 p-1.5 bg-muted rounded-full text-muted-foreground\">\n                          <MapPin className=\"h-3.5 w-3.5\" />\n                        </div>\n                        <span className=\"text-sm\">{location.name}</span>\n                      </motion.div>\n                    ))\n                  ) : (\n                    <div className=\"px-3 py-8 flex flex-col items-center justify-center\">\n                      <Search className=\"h-6 w-6 text-muted-foreground mb-2\" />\n                      <p className=\"text-sm text-muted-foreground\">No locations found</p>\n                    </div>\n                  )}\n                </div>\n              )}\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n    </div>\n  )\n}\n",
      "path": "/components/framixui/input/input-05.tsx",
      "target": "/components/codesnippetui/input-05.tsx"
    }
  ]
}