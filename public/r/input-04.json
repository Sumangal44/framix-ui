{
  "name": "input-04",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "registryDependencies": [
    "button",
    "input"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\"\n\nimport { useState, useRef } from \"react\"\nimport { motion } from \"motion/react\"\nimport { Eye, EyeOff, Check, X, AlertTriangle } from \"lucide-react\"\nimport { Input } from \"@/components/ui/input\"\nimport { Button } from \"@/components/ui/button\"\nimport { cn } from \"@/lib/utils\"\n\nexport default function Input04() {\n  const [password, setPassword] = useState(\"\")\n  const [showPassword, setShowPassword] = useState(false)\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  // Password strength calculation\n  const calculateStrength = (pass: string): number => {\n    let score = 0\n    if (!pass) return score\n\n    // Length check\n    if (pass.length >= 8) score += 1\n    if (pass.length >= 12) score += 1\n\n    // Character variety checks\n    if (/[A-Z]/.test(pass)) score += 1\n    if (/[a-z]/.test(pass)) score += 1\n    if (/[0-9]/.test(pass)) score += 1\n    if (/[^A-Za-z0-9]/.test(pass)) score += 1\n\n    return Math.min(score, 5)\n  }\n\n  const strength = calculateStrength(password)\n\n  const getStrengthLabel = (score: number): string => {\n    if (score === 0) return \"Enter password\"\n    if (score === 1) return \"Very weak\"\n    if (score === 2) return \"Weak\"\n    if (score === 3) return \"Medium\"\n    if (score === 4) return \"Strong\"\n    return \"Very strong\"\n  }\n\n  const getStrengthColor = (score: number): string => {\n    if (score === 0) return \"bg-muted\"\n    if (score === 1) return \"bg-red-500\"\n    if (score === 2) return \"bg-orange-500\"\n    if (score === 3) return \"bg-yellow-500\"\n    if (score === 4) return \"bg-green-500\"\n    return \"bg-emerald-500\"\n  }\n\n  const getStrengthIcon = (score: number) => {\n    if (score === 0) return null\n    if (score <= 2) return <X className=\"h-3.5 w-3.5\" />\n    if (score === 3) return <AlertTriangle className=\"h-3.5 w-3.5\" />\n    return <Check className=\"h-3.5 w-3.5\" />\n  }\n\n  // Password requirements\n  const requirements = [\n    { id: 1, text: \"At least 8 characters\", met: password.length >= 8 },\n    { id: 2, text: \"At least 1 uppercase letter\", met: /[A-Z]/.test(password) },\n    { id: 3, text: \"At least 1 lowercase letter\", met: /[a-z]/.test(password) },\n    { id: 4, text: \"At least 1 number\", met: /[0-9]/.test(password) },\n    { id: 5, text: \"At least 1 special character\", met: /[^A-Za-z0-9]/.test(password) },\n  ]\n\n  return (\n    <div className=\"w-full max-w-md mx-auto space-y-4\">\n      <div className=\"relative\">\n        <div className=\"flex items-center\">\n          <div className=\"relative flex-1\">\n            <Input\n              ref={inputRef}\n              type={showPassword ? \"text\" : \"password\"}\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              placeholder=\"Create password\"\n              className=\"pr-10\"\n            />\n            <Button\n              type=\"button\"\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"absolute right-0 top-0 h-full px-3 text-muted-foreground hover:text-foreground\"\n              onClick={() => setShowPassword(!showPassword)}\n            >\n              {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n              <span className=\"sr-only\">{showPassword ? \"Hide password\" : \"Show password\"}</span>\n            </Button>\n          </div>\n        </div>\n\n        {/* Strength meter */}\n        <div className=\"mt-2\">\n          <div className=\"flex items-center justify-between mb-1\">\n            <div className=\"text-xs font-medium flex items-center gap-1.5\">\n              <motion.span\n                key={getStrengthLabel(strength)}\n                initial={{ opacity: 0, y: -5 }}\n                animate={{ opacity: 1, y: 0 }}\n                className=\"flex items-center gap-1\"\n              >\n                {strength > 0 && (\n                  <span\n                    className={cn(\n                      \"flex items-center justify-center rounded-full w-4 h-4\",\n                      strength <= 2\n                        ? \"bg-red-500 text-white\"\n                        : strength === 3\n                          ? \"bg-yellow-500 text-white\"\n                          : \"bg-green-500 text-white\",\n                    )}\n                  >\n                    {getStrengthIcon(strength)}\n                  </span>\n                )}\n                {getStrengthLabel(strength)}\n              </motion.span>\n            </div>\n          </div>\n\n          <div className=\"h-1.5 w-full bg-muted rounded-full overflow-hidden flex\">\n            {[1, 2, 3, 4, 5].map((segment) => (\n              <motion.div\n                key={segment}\n                className={cn(\"h-full\", segment <= strength ? getStrengthColor(strength) : \"bg-muted\")}\n                style={{ width: \"20%\" }}\n                initial={{ scaleX: 0 }}\n                animate={{ scaleX: segment <= strength ? 1 : 0 }}\n                transition={{ duration: 0.3, delay: segment * 0.05 }}\n              />\n            ))}\n          </div>\n        </div>\n\n        {/* Requirements */}\n        <div className=\"mt-3 space-y-1\">\n          {requirements.map((req) => (\n            <motion.div\n              key={req.id}\n              className=\"flex items-center text-xs\"\n              animate={{\n                opacity: password ? 1 : 0.5,\n                color: req.met ? \"var(--green-500)\" : \"var(--muted-foreground)\",\n              }}\n            >\n              <motion.div\n                animate={{\n                  backgroundColor: req.met ? \"var(--green-500)\" : \"transparent\",\n                  borderColor: req.met ? \"var(--green-500)\" : \"var(--muted-foreground)\",\n                }}\n                className={cn(\"mr-2 h-3.5 w-3.5 rounded-full border flex items-center justify-center\")}\n              >\n                {req.met && <Check className=\"h-2 w-2 text-white\" />}\n              </motion.div>\n              {req.text}\n            </motion.div>\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "path": "/components/framixui/input/input-04.tsx",
      "target": "/components/codesnippetui/input-04.tsx"
    }
  ]
}