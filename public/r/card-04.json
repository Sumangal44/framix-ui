{
  "name": "card-04",
  "type": "registry:component",
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\"\n\nimport type React from \"react\"\n\nimport { useState, useEffect, useRef } from \"react\"\n\nexport default function Card04() {\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [progress, setProgress] = useState(37)\n  const [isShuffle, setIsShuffle] = useState(false)\n  const [isRepeat, setIsRepeat] = useState(false)\n  const [isLiked, setIsLiked] = useState(false)\n  const [volume, setVolume] = useState(70)\n  const [showVolumeSlider, setShowVolumeSlider] = useState(false)\n  const progressBarRef = useRef<HTMLDivElement>(null)\n\n  // Format time from seconds to MM:SS\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60)\n    const secs = Math.floor(seconds % 60)\n    return `${mins}:${secs.toString().padStart(2, \"0\")}`\n  }\n\n  // Handle progress bar click to update position\n  const handleProgressBarClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (progressBarRef.current) {\n      const rect = progressBarRef.current.getBoundingClientRect()\n      const x = e.clientX - rect.left\n      const width = rect.width\n      const percentage = (x / width) * 100\n      setProgress(Math.min(Math.max(percentage, 0), 100))\n    }\n  }\n\n  // Simulate progress when playing\n  useEffect(() => {\n    let interval: NodeJS.Timeout\n\n    if (isPlaying && progress < 100) {\n      interval = setInterval(() => {\n        setProgress((prev) => {\n          if (prev >= 100) {\n            setIsPlaying(false)\n            return 100\n          }\n          return prev + 0.5\n        })\n      }, 1000)\n    }\n\n    return () => clearInterval(interval)\n  }, [isPlaying, progress])\n\n  // Utility function for conditional class names\n  const classNames = (...classes: (string | boolean | undefined)[]) => {\n    return classes.filter(Boolean).join(\" \")\n  }\n\n  // Current and total time in seconds (for a 3:42 song)\n  const totalDuration = 222\n  const currentTime = Math.floor((progress / 100) * totalDuration)\n\n  return (\n    <div className=\"w-full max-w-md mx-auto\">\n      <div className=\"bg-white dark:bg-zinc-900 border border-zinc-200 dark:border-zinc-800 rounded-xl shadow-sm overflow-hidden\">\n        {/* Album art */}\n        <div className=\"relative aspect-square bg-zinc-100 dark:bg-zinc-800 overflow-hidden\">\n          {/* Album cover image */}\n          <div\n            className=\"absolute inset-0 bg-cover bg-center\"\n            style={{\n              backgroundImage: `url('https://placeholder.svg?height=400&width=400&text=M83+-+Midnight+City')`,\n              backgroundSize: \"cover\",\n              backgroundPosition: \"center\",\n            }}\n          ></div>\n\n          {/* Overlay with play button when not playing */}\n          <div\n            className={classNames(\n              \"absolute inset-0 flex items-center justify-center cursor-pointer transition-opacity duration-300\",\n              isPlaying ? \"bg-black/0 opacity-0\" : \"bg-black/40 opacity-100\",\n            )}\n            onClick={() => setIsPlaying(true)}\n          >\n            <div className=\"w-16 h-16 rounded-full bg-white dark:bg-zinc-100 flex items-center justify-center shadow-lg transform transition-transform hover:scale-105 active:scale-95\">\n              <svg className=\"w-8 h-8 text-black dark:text-zinc-900 ml-1\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                <path d=\"M8 5v14l11-7z\"></path>\n              </svg>\n            </div>\n          </div>\n        </div>\n\n        {/* Song info */}\n        <div className=\"p-4 border-b border-zinc-100 dark:border-zinc-800\">\n          <div className=\"flex items-start justify-between\">\n            <div>\n              <h3 className=\"font-medium text-zinc-900 dark:text-zinc-100 text-lg\">Midnight City</h3>\n              <p className=\"text-zinc-500 dark:text-zinc-400 text-sm\">M83 â€¢ Hurry Up, We're Dreaming</p>\n            </div>\n            <button\n              onClick={() => setIsLiked(!isLiked)}\n              className={classNames(\n                \"p-2 rounded-full transition-colors\",\n                isLiked\n                  ? \"text-red-500 hover:text-red-600 dark:text-red-400 dark:hover:text-red-500\"\n                  : \"text-zinc-400 hover:text-zinc-600 dark:text-zinc-500 dark:hover:text-zinc-300\",\n              )}\n            >\n              <svg\n                className={classNames(\n                  \"w-5 h-5 transition-transform duration-200\",\n                  isLiked ? \"fill-current\" : \"fill-none\",\n                )}\n                viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\"\n                strokeWidth=\"2\"\n              >\n                <path d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\"></path>\n              </svg>\n            </button>\n          </div>\n        </div>\n\n        {/* Progress bar - now clickable */}\n        <div className=\"px-4 pt-3\">\n          <div\n            ref={progressBarRef}\n            className=\"relative h-1 bg-zinc-200 dark:bg-zinc-700 rounded-full cursor-pointer group\"\n            onClick={handleProgressBarClick}\n          >\n            <div\n              className=\"absolute top-0 left-0 h-full bg-zinc-500 dark:bg-zinc-400 rounded-full\"\n              style={{ width: `${progress}%` }}\n            ></div>\n            <div\n              className=\"absolute top-1/2 -translate-y-1/2 -translate-x-1/2 w-3 h-3 rounded-full bg-white dark:bg-zinc-100 border border-zinc-500 dark:border-zinc-400 opacity-0 group-hover:opacity-100 transition-opacity\"\n              style={{ left: `${progress}%` }}\n            ></div>\n          </div>\n\n          {/* Time indicators */}\n          <div className=\"flex justify-between mt-1 text-xs text-zinc-500 dark:text-zinc-400\">\n            <span>{formatTime(currentTime)}</span>\n            <span>{formatTime(totalDuration)}</span>\n          </div>\n        </div>\n\n        {/* Controls */}\n        <div className=\"px-4 py-3 flex items-center justify-between\">\n          {/* Left controls */}\n          <div className=\"flex items-center gap-3\">\n            <button\n              onClick={() => setIsShuffle(!isShuffle)}\n              className={classNames(\n                \"p-1.5 rounded-full transition-colors\",\n                isShuffle\n                  ? \"text-zinc-900 dark:text-zinc-100\"\n                  : \"text-zinc-500 dark:text-zinc-400 hover:text-zinc-700 dark:hover:text-zinc-200\",\n              )}\n            >\n              <svg className=\"w-4 h-4\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                <polyline points=\"16 3 21 3 21 8\"></polyline>\n                <line x1=\"4\" y1=\"20\" x2=\"21\" y2=\"3\"></line>\n                <polyline points=\"21 16 21 21 16 21\"></polyline>\n                <line x1=\"15\" y1=\"15\" x2=\"21\" y2=\"21\"></line>\n                <line x1=\"4\" y1=\"4\" x2=\"9\" y2=\"9\"></line>\n              </svg>\n            </button>\n\n            {/* Previous button */}\n            <button className=\"p-1.5 text-zinc-700 dark:text-zinc-200 hover:text-zinc-900 dark:hover:text-white transition-colors\">\n              <svg className=\"w-5 h-5\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                <path d=\"M19 20L9 12l10-8v16zM5 4v16h2V4H5z\"></path>\n              </svg>\n            </button>\n          </div>\n\n          {/* Play/Pause button */}\n          <button\n            onClick={() => setIsPlaying(!isPlaying)}\n            className=\"w-10 h-10 rounded-full bg-white dark:bg-zinc-100 text-black dark:text-zinc-900 flex items-center justify-center shadow-sm hover:shadow transition-shadow transform hover:scale-105 active:scale-95\"\n          >\n            {isPlaying ? (\n              <svg className=\"w-5 h-5\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                <path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"></path>\n              </svg>\n            ) : (\n              <svg className=\"w-5 h-5 ml-0.5\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                <path d=\"M8 5v14l11-7z\"></path>\n              </svg>\n            )}\n          </button>\n\n          {/* Right controls */}\n          <div className=\"flex items-center gap-3\">\n            {/* Next button */}\n            <button className=\"p-1.5 text-zinc-700 dark:text-zinc-200 hover:text-zinc-900 dark:hover:text-white transition-colors\">\n              <svg className=\"w-5 h-5\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                <path d=\"M5 4l10 8-10 8V4zm14 0v16h-2V4h2z\"></path>\n              </svg>\n            </button>\n\n            {/* Repeat button - now black/white */}\n            <button\n              onClick={() => setIsRepeat(!isRepeat)}\n              className={classNames(\n                \"p-1.5 rounded-full transition-colors\",\n                isRepeat\n                  ? \"text-zinc-900 dark:text-zinc-100\"\n                  : \"text-zinc-500 dark:text-zinc-400 hover:text-zinc-700 dark:hover:text-zinc-200\",\n              )}\n            >\n              <svg className=\"w-4 h-4\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                <polyline points=\"17 1 21 5 17 9\"></polyline>\n                <path d=\"M3 11V9a4 4 0 0 1 4-4h14\"></path>\n                <polyline points=\"7 23 3 19 7 15\"></polyline>\n                <path d=\"M21 13v2a4 4 0 0 1-4 4H3\"></path>\n              </svg>\n            </button>\n          </div>\n        </div>\n\n        {/* Volume control - now black/white */}\n        <div className=\"px-4 pb-4 flex items-center gap-2\">\n          <div className=\"relative\">\n            <button\n              className=\"p-1.5 text-zinc-700 dark:text-zinc-200 hover:text-zinc-900 dark:hover:text-white transition-colors\"\n              onClick={() => setShowVolumeSlider(!showVolumeSlider)}\n            >\n              <svg className=\"w-4 h-4\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                {volume > 60 ? (\n                  <>\n                    <polygon points=\"11 5 6 9 2 9 2 15 6 15 11 19 11 5\"></polygon>\n                    <path d=\"M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7.07\"></path>\n                  </>\n                ) : volume > 0 ? (\n                  <>\n                    <polygon points=\"11 5 6 9 2 9 2 15 6 15 11 19 11 5\"></polygon>\n                    <path d=\"M15.54 8.46a5 5 0 0 1 0 7.07\"></path>\n                  </>\n                ) : (\n                  <>\n                    <polygon points=\"11 5 6 9 2 9 2 15 6 15 11 19 11 5\"></polygon>\n                    <line x1=\"23\" y1=\"9\" x2=\"17\" y2=\"15\"></line>\n                    <line x1=\"17\" y1=\"9\" x2=\"23\" y2=\"15\"></line>\n                  </>\n                )}\n              </svg>\n            </button>\n\n            {/* Volume slider popup */}\n            {showVolumeSlider && (\n              <div className=\"absolute bottom-full left-0 mb-2 p-3 bg-white dark:bg-zinc-800 rounded-lg shadow-lg border border-zinc-200 dark:border-zinc-700 w-40\">\n                <input\n                  type=\"range\"\n                  min=\"0\"\n                  max=\"100\"\n                  value={volume}\n                  onChange={(e) => setVolume(Number.parseInt(e.target.value))}\n                  className=\"w-full h-1.5 bg-zinc-200 dark:bg-zinc-700 rounded-full appearance-none cursor-pointer\"\n                  style={{\n                    backgroundImage: `linear-gradient(to right, rgb(113 113 122 / var(--tw-bg-opacity)) 0%, rgb(113 113 122 / var(--tw-bg-opacity)) ${volume}%, rgb(228 228 231 / var(--tw-bg-opacity)) ${volume}%)`,\n                  }}\n                />\n              </div>\n            )}\n          </div>\n\n          {/* Device selection */}\n          <button className=\"p-1.5 text-zinc-500 dark:text-zinc-400 hover:text-zinc-700 dark:hover:text-zinc-200 transition-colors ml-auto\">\n            <svg className=\"w-4 h-4\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n              <rect x=\"2\" y=\"3\" width=\"20\" height=\"14\" rx=\"2\" ry=\"2\"></rect>\n              <line x1=\"8\" y1=\"21\" x2=\"16\" y2=\"21\"></line>\n              <line x1=\"12\" y1=\"17\" x2=\"12\" y2=\"21\"></line>\n            </svg>\n          </button>\n\n          {/* Queue button */}\n          <button className=\"p-1.5 text-zinc-500 dark:text-zinc-400 hover:text-zinc-700 dark:hover:text-zinc-200 transition-colors\">\n            <svg className=\"w-4 h-4\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n              <line x1=\"8\" y1=\"6\" x2=\"21\" y2=\"6\"></line>\n              <line x1=\"8\" y1=\"12\" x2=\"21\" y2=\"12\"></line>\n              <line x1=\"8\" y1=\"18\" x2=\"21\" y2=\"18\"></line>\n              <line x1=\"3\" y1=\"6\" x2=\"3.01\" y2=\"6\"></line>\n              <line x1=\"3\" y1=\"12\" x2=\"3.01\" y2=\"12\"></line>\n              <line x1=\"3\" y1=\"18\" x2=\"3.01\" y2=\"18\"></line>\n            </svg>\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "path": "/components/framixui/card/card-04.tsx",
      "target": "/components/codesnippetui/card-04.tsx"
    }
  ]
}