{
  "name": "button-05",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\"\n\nimport { motion, useAnimationControls } from \"motion/react\"\nimport { PartyPopper, Sparkles } from \"lucide-react\"\nimport { useState } from \"react\"\n\nexport default function Button05() {\n  const [isActive, setIsActive] = useState(false)\n  const controls = useAnimationControls()\n\n  const handleClick = async () => {\n    if (isActive) return\n\n    setIsActive(true)\n\n    // Animate with more dynamic effects\n    await controls.start({\n      scale: [1, 1.1, 0.95, 1.02, 1],\n      rotateZ: [0, -2, 2, -1, 0],\n      transition: { duration: 0.6, ease: [0.25, 0.46, 0.45, 0.94] },\n    })\n\n    // Reset after animation\n    setTimeout(() => {\n      setIsActive(false)\n    }, 4000)\n  }\n\n  // Enhanced confetti colors with neon vibes\n  const confettiColors = [\n    \"bg-gradient-to-r from-pink-400 to-rose-500\",\n    \"bg-gradient-to-r from-purple-400 to-indigo-500\", \n    \"bg-gradient-to-r from-yellow-300 to-orange-400\",\n    \"bg-gradient-to-r from-blue-400 to-cyan-500\",\n    \"bg-gradient-to-r from-green-400 to-emerald-500\",\n    \"bg-gradient-to-r from-red-400 to-pink-500\",\n    \"bg-gradient-to-r from-orange-400 to-yellow-500\",\n    \"bg-gradient-to-r from-teal-400 to-blue-500\",\n    \"bg-gradient-to-r from-violet-400 to-purple-500\",\n    \"bg-gradient-to-r from-lime-400 to-green-500\"\n  ]\n\n  const solidColors = [\n    \"bg-pink-400\", \"bg-purple-400\", \"bg-yellow-400\", \"bg-blue-400\", \n    \"bg-green-400\", \"bg-red-400\", \"bg-orange-400\", \"bg-teal-400\",\n    \"bg-violet-400\", \"bg-lime-400\", \"bg-cyan-400\", \"bg-rose-400\"\n  ]\n\n  return (\n    <div>\n      <motion.div className=\"relative\" animate={controls}>\n        <motion.button\n          className=\"relative min-w-40 h-10 px-6 overflow-visible rounded-xl\n                     bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600\n                     hover:from-indigo-500 hover:via-purple-500 hover:to-pink-500\n                     text-white font-semibold text-sm\n                     shadow-lg shadow-purple-500/25\n                     border border-white/10\n                     backdrop-blur-sm\n                     transition-all duration-200\n                     hover:shadow-purple-500/40\n                     active:scale-95\"\n          onClick={handleClick}\n          whileHover={{ \n            scale: 1.03,\n            boxShadow: \"0 0 20px rgba(168, 85, 247, 0.4)\"\n          }}\n          whileTap={{ scale: 0.95 }}\n        >\n          {/* Animated background glow */}\n          <motion.div\n            className=\"absolute inset-0 rounded-xl opacity-60\"\n            animate={{\n              background: isActive \n                ? [\n                    \"linear-gradient(45deg, #4f46e5, #7c3aed, #ec4899)\",\n                    \"linear-gradient(90deg, #ec4899, #4f46e5, #7c3aed)\", \n                    \"linear-gradient(135deg, #7c3aed, #ec4899, #4f46e5)\",\n                    \"linear-gradient(180deg, #4f46e5, #7c3aed, #ec4899)\"\n                  ]\n                : \"linear-gradient(45deg, #4f46e5, #7c3aed, #ec4899)\"\n            }}\n            transition={{ duration: 2, repeat: isActive ? Infinity : 0 }}\n          />\n\n          {/* Button content */}\n          <span className=\"relative flex items-center justify-center gap-2 z-10\">\n            <motion.div\n              animate={{\n                rotate: isActive ? [0, 20, -20, 15, -15, 0] : 0,\n                scale: isActive ? [1, 1.2, 1.1, 1.1, 1] : 1,\n              }}\n              transition={{ duration: 0.8 }}\n            >\n            </motion.div>\n            <motion.span\n              animate={{\n                scale: isActive ? [1, 1.05, 1] : 1,\n              }}\n              transition={{ duration: 0.4 }}\n            >\n              {isActive ? \"Hooray!\" : \"Celebrate\"}\n            </motion.span>\n          </span>\n\n          {/* Pulse effect */}\n          {isActive && (\n            <motion.div\n              className=\"absolute inset-0 rounded-xl bg-white\"\n              initial={{ opacity: 0.2, scale: 1 }}\n              animate={{ \n                opacity: [0.2, 0, 0.1, 0],\n                scale: [1, 1.3, 1.8, 2] \n              }}\n              transition={{ duration: 0.8, ease: \"easeOut\" }}\n            />\n          )}\n\n          {/* Enhanced confetti particles */}\n          {isActive && (\n            <>\n              {/* Explosive burst particles */}\n              {Array.from({ length: 25 }).map((_, i) => {\n                const size = Math.random() * 8 + 3\n                const angle = (360 / 25) * i + Math.random() * 20\n                const distance = Math.random() * 80 + 50\n                const x = Math.cos(angle * Math.PI / 180) * distance\n                const y = Math.sin(angle * Math.PI / 180) * distance\n                const delay = Math.random() * 0.2\n                const duration = Math.random() * 0.6 + 1\n                const colorIndex = Math.floor(Math.random() * confettiColors.length)\n\n                return (\n                  <motion.div\n                    key={`burst-${i}`}\n                    className={`absolute top-1/2 left-1/2 rounded-full ${confettiColors[colorIndex]} shadow-lg`}\n                    initial={{\n                      x: 0,\n                      y: 0,\n                      opacity: 1,\n                      scale: 0,\n                      rotate: 0,\n                    }}\n                    animate={{\n                      x,\n                      y,\n                      opacity: [1, 1, 0],\n                      scale: [0, 1, 0.3],\n                      rotate: Math.random() * 360,\n                    }}\n                    transition={{\n                      duration,\n                      delay,\n                      ease: [0.25, 0.46, 0.45, 0.94],\n                    }}\n                    style={{ width: size, height: size }}\n                  />\n                )\n              })}\n\n              {/* Floating hearts */}\n              {Array.from({ length: 5 }).map((_, i) => {\n                const x = (Math.random() - 0.5) * 120\n                const y = -Math.random() * 100 - 30\n                const delay = Math.random() * 0.3\n                const duration = Math.random() * 0.8 + 1.5\n\n                return (\n                  <motion.div\n                    key={`heart-${i}`}\n                    className=\"absolute top-1/2 left-1/2 text-red-400 text-lg\"\n                    initial={{\n                      x: 0,\n                      y: 0,\n                      opacity: 1,\n                      scale: 0,\n                    }}\n                    animate={{\n                      x,\n                      y,\n                      opacity: [1, 1, 0],\n                      scale: [0, 1, 0.5],\n                      rotate: [0, 360],\n                    }}\n                    transition={{\n                      duration,\n                      delay,\n                      ease: \"easeOut\",\n                    }}\n                  >\n                    üíñ\n                  </motion.div>\n                )\n              })}\n\n              {/* Star particles */}\n              {Array.from({ length: 8 }).map((_, i) => {\n                const angle = Math.random() * 360\n                const distance = Math.random() * 70 + 40\n                const x = Math.cos(angle * Math.PI / 180) * distance\n                const y = Math.sin(angle * Math.PI / 180) * distance\n                const delay = Math.random() * 0.3\n                const duration = Math.random() * 0.8 + 1.2\n\n                return (\n                  <motion.div\n                    key={`star-${i}`}\n                    className=\"absolute top-1/2 left-1/2 text-yellow-300 text-base\"\n                    initial={{\n                      x: 0,\n                      y: 0,\n                      opacity: 1,\n                      scale: 0,\n                      rotate: 0,\n                    }}\n                    animate={{\n                      x,\n                      y,\n                      opacity: [1, 1, 0],\n                      scale: [0, 1.2, 0],\n                      rotate: [0, 180, 360],\n                    }}\n                    transition={{\n                      duration,\n                      delay,\n                      ease: \"easeOut\",\n                    }}\n                  >\n                    ‚≠ê\n                  </motion.div>\n                )\n              })}\n\n              {/* Glowing orbs */}\n              {Array.from({ length: 15 }).map((_, i) => {\n                const size = Math.random() * 6 + 2\n                const angle = Math.random() * 360\n                const distance = Math.random() * 90 + 50\n                const x = Math.cos(angle * Math.PI / 180) * distance\n                const y = Math.sin(angle * Math.PI / 180) * distance\n                const delay = Math.random() * 0.4\n                const duration = Math.random() * 1 + 1.5\n                const colorIndex = Math.floor(Math.random() * solidColors.length)\n\n                return (\n                  <motion.div\n                    key={`orb-${i}`}\n                    className={`absolute top-1/2 left-1/2 rounded-full ${solidColors[colorIndex]} shadow-lg`}\n                    style={{\n                      boxShadow: `0 0 ${size * 2}px currentColor`,\n                      filter: 'blur(0.5px)',\n                      width: size, height: size,\n                    }}\n                    initial={{\n                      x: 0,\n                      y: 0,\n                      opacity: 1,\n                      scale: 0,\n                    }}\n                    animate={{\n                      x,\n                      y,\n                      opacity: [1, 0.8, 0],\n                      scale: [0, 1, 0.2],\n                    }}\n                    transition={{\n                      duration,\n                      delay,\n                      ease: [0.25, 0.46, 0.45, 0.94],\n                    }}\n                  />\n                )\n              })}\n\n              {/* Spiral confetti */}\n              {Array.from({ length: 8 }).map((_, i) => {\n                const spiralAngle = (i / 8) * 360 * 2 // 2 full rotations\n                const radius = 40 + (i / 8) * 50\n                const x = Math.cos(spiralAngle * Math.PI / 180) * radius\n                const y = Math.sin(spiralAngle * Math.PI / 180) * radius\n                const delay = i * 0.08\n                const duration = 1.5\n                const colorIndex = Math.floor(Math.random() * solidColors.length)\n\n                return (\n                  <motion.div\n                    key={`spiral-${i}`}\n                    className={`absolute top-1/2 left-1/2 w-2 h-6 ${solidColors[colorIndex]} rounded-full`}\n                    initial={{\n                      x: 0,\n                      y: 0,\n                      opacity: 1,\n                      scale: 0,\n                      rotate: 0,\n                    }}\n                    animate={{\n                      x,\n                      y,\n                      opacity: [1, 1, 0],\n                      scale: [0, 1, 0.3],\n                      rotate: spiralAngle + 180,\n                    }}\n                    transition={{\n                      duration,\n                      delay,\n                      ease: \"easeOut\",\n                    }}\n                  />\n                )\n              })}\n            </>\n          )}\n        </motion.button>\n\n        {/* Ambient glow effect */}\n        <motion.div\n          className=\"absolute inset-0 rounded-xl bg-gradient-to-r from-indigo-500/15 via-purple-500/15 to-pink-500/15 blur-lg -z-10\"\n          animate={{\n            scale: isActive ? [1, 1.2, 1.1] : 1,\n            opacity: isActive ? [0.3, 0.5, 0.2] : 0.3,\n          }}\n          transition={{ duration: 0.8 }}\n        />\n      </motion.div>\n    </div>\n  )\n}",
      "path": "/components/framixui/button/button-05.tsx",
      "target": "/components/framixui/button-05.tsx"
    }
  ]
}