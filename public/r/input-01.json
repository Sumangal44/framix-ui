{
  "name": "input-01",
  "type": "registry:component",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "registryDependencies": [
    "button",
    "input"
  ],
  "files": [
    {
      "type": "registry:component",
      "content": "\"use client\"\n\nimport { useState, useRef, useEffect } from \"react\"\nimport { motion, AnimatePresence } from \"motion/react\"\nimport { Search, X, ShoppingBag, Clock, TrendingUp } from \"lucide-react\"\nimport { Input } from \"@/components/ui/input\"\nimport { Button } from \"@/components/ui/button\"\nimport { cn } from \"@/lib/utils\"\n\nexport default function Input01() {\n  const [query, setQuery] = useState(\"\")\n  const [isFocused, setIsFocused] = useState(false)\n  const inputRef = useRef<HTMLInputElement>(null)\n  const containerRef = useRef<HTMLDivElement>(null)\n\n  // Mock suggestions based on query\n  const suggestions = [\n    { id: 1, text: \"Wireless headphones\", type: \"trending\" },\n    { id: 2, text: \"Smart watches\", type: \"trending\" },\n    { id: 3, text: \"Bluetooth speakers\", type: \"recent\" },\n    { id: 4, text: \"Laptop accessories\", type: \"recent\" },\n    { id: 5, text: \"Fitness trackers\", type: \"product\" },\n    { id: 6, text: \"Mechanical keyboards\", type: \"product\" },\n  ].filter((item) => query && item.text.toLowerCase().includes(query.toLowerCase()))\n\n  // Handle click outside to close suggestions\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (containerRef.current && !containerRef.current.contains(event.target as Node)) {\n        setIsFocused(false)\n      }\n    }\n\n    document.addEventListener(\"mousedown\", handleClickOutside)\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside)\n  }, [])\n\n  const handleClear = () => {\n    setQuery(\"\")\n    inputRef.current?.focus()\n  }\n\n  const getIcon = (type: string) => {\n    switch (type) {\n      case \"trending\":\n        return <TrendingUp className=\"h-3.5 w-3.5\" />\n      case \"recent\":\n        return <Clock className=\"h-3.5 w-3.5\" />\n      case \"product\":\n        return <ShoppingBag className=\"h-3.5 w-3.5\" />\n      default:\n        return <Search className=\"h-3.5 w-3.5\" />\n    }\n  }\n\n  return (\n    <div className=\"w-full max-w-md mx-auto\" ref={containerRef}>\n      <div className=\"relative\">\n        <motion.div\n          className={cn(\n            \"relative rounded-lg\",\n            \"border border-input\",\n            \"bg-background\",\n            \"shadow-sm\",\n            isFocused && \"ring-2 ring-ring ring-offset-2 ring-offset-background\",\n          )}\n          animate={{\n            scale: isFocused ? 1.02 : 1,\n          }}\n          transition={{ duration: 0.2 }}\n        >\n          <div className=\"flex items-center px-3\">\n            <Search className=\"h-4 w-4 text-muted-foreground mr-2\" />\n            <Input\n              ref={inputRef}\n              type=\"text\"\n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n              onFocus={() => setIsFocused(true)}\n              placeholder=\"Search products...\"\n              className=\"border-0 bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0 p-0 h-10 text-sm\"\n            />\n            <AnimatePresence>\n              {query && (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  animate={{ opacity: 1, scale: 1 }}\n                  exit={{ opacity: 0, scale: 0.8 }}\n                  transition={{ duration: 0.15 }}\n                >\n                  <Button type=\"button\" variant=\"ghost\" size=\"icon\" className=\"h-6 w-6\" onClick={handleClear}>\n                    <X className=\"h-3.5 w-3.5\" />\n                    <span className=\"sr-only\">Clear search</span>\n                  </Button>\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </div>\n        </motion.div>\n\n        <AnimatePresence>\n          {isFocused && suggestions.length > 0 && (\n            <motion.div\n              className=\"absolute left-0 right-0 mt-2 py-2 bg-background border rounded-lg shadow-md z-10\"\n              initial={{ opacity: 0, y: -10 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -10 }}\n              transition={{ duration: 0.2 }}\n            >\n              <div className=\"max-h-60 overflow-y-auto\">\n                {suggestions.map((suggestion, index) => (\n                  <motion.div\n                    key={suggestion.id}\n                    className=\"px-3 py-1.5 hover:bg-muted flex items-center cursor-pointer\"\n                    initial={{ opacity: 0, x: -10 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ duration: 0.2, delay: index * 0.05 }}\n                    onClick={() => {\n                      setQuery(suggestion.text)\n                      setIsFocused(false)\n                    }}\n                  >\n                    <span className=\"mr-2 text-muted-foreground\">{getIcon(suggestion.type)}</span>\n                    <span className=\"text-sm\">{suggestion.text}</span>\n                  </motion.div>\n                ))}\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n    </div>\n  )\n}\n",
      "path": "/components/framixui/input/input-01.tsx",
      "target": "/components/codesnippetui/input-01.tsx"
    }
  ]
}